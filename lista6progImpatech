## QUESTÃO 1

def encontrar_posicao(lista, alvo):
    esquerda = 0
    direita = len(lista) - 1

    while esquerda <= direita:
        meio = (esquerda + direita) // 2
        if lista[meio] == alvo:
            return meio
        elif direita == esquerda and lista[-1] < alvo:
            return meio + 1
        elif direita == esquerda:
            return meio     
        elif lista[meio] < alvo:    
            esquerda = meio + 1
        else:
            direita = meio
        
lista_c = [1, 3, 5, 7, 9, 11, 13]
valor = 6
resultado = encontrar_posicao(lista_c, valor)
if valor in lista_c:
    print(f'A posição do número {valor} é: {resultado}!')
else:
    print(f'A posição do número {valor} deveria ser {resultado}!')

## QUESTÃO 2

def triangulo_pascal(valor):
    lista_final = []
    for val in range(valor):
        lista_recente = [1] * (val + 1)
        for num in range(1, val):
            lista_recente[num] = lista_final[val - 1][num - 1] + lista_final[val - 1][num]
        lista_final.append(lista_recente)
    return lista_final[-1]

valor = 10
resultado = triangulo_pascal(valor)
print(resultado)

## QUESTÃO 3 - Até item a no momento

class Lista_No:
    def __init__(self, valor = 0, proximo = None):
        self.valor = valor
        self.proximo = proximo

class LinkedList:
    def __init__(self, cabeca = None):
        self.cabeca = cabeca
        self.length = self.calculate_length()

    def calculate_length(self):
        atual = self.cabeca
        count = 0
        while atual is not None:
            count += 1
            atual = atual.proximo
        return count

# Testando a implementação

# Criando nós da lista
node3 = Lista_No(3)
node2 = Lista_No(2, node3)
node1 = Lista_No(1, node2)

# Criando a lista encadeada com o nó cabeça
linked_list = LinkedList(node1)

# Verificando o comprimento da lista
print(linked_list.length)  # Saída esperada: 3

## QUESTÃO 4

def parse_polinomio(polinomio):
    # Remove espaços em branco
    polinomio = polinomio.replace(" ", "")
    
    # Adiciona um '+' no início se o polinômio não começar com um sinal
    if polinomio[0] not in '+-':
        polinomio = '+' + polinomio
    
    # Inicializa o dicionário para armazenar coeficientes por grau
    resultado = {}
    
    # Variáveis auxiliares
    i = 0
    n = len(polinomio)
    
    while i < n:
        # Identifica o sinal do termo
        sinal = 1
        if polinomio[i] == '+':
            sinal = 1
            i += 1
        elif polinomio[i] == '-':
            sinal = -1
            i += 1
        
        # Extrai o coeficiente
        coef_str = ''
        while i < n and (polinomio[i].isdigit() or polinomio[i] == '*'):
            coef_str += polinomio[i]
            i += 1
        
        # Define o coeficiente
        if coef_str == '' or coef_str == '*':
            coef = 1
        else:
            coef = int(coef_str.replace('*', ''))
        
        # Extrai a variável e o grau
        if i < n and polinomio[i] == 'x':
            i += 1
            if i < n and polinomio[i] == '^':
                i += 1
                grau_str = ''
                while i < n and polinomio[i].isdigit():
                    grau_str += polinomio[i]
                    i += 1
                grau = int(grau_str)
            else:
                grau = 1
        else:
            grau = 0
        
        # Atualiza o dicionário com o coeficiente
        coef *= sinal
        if grau in resultado:
            resultado[grau] += coef
        else:
            resultado[grau] = coef
    
    return resultado

# Testes
print(parse_polinomio("3x^2 + 2x - 5"))
print(parse_polinomio("-4x^3 + 3x^2 - 2x + 1"))
print(parse_polinomio("x^3 - x^2 + x - 1"))
print(parse_polinomio("x^10 - x^2 + 2x - 2x + 5 - 5"))

































